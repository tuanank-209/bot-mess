const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const moment = require('moment-timezone');
const Jimp = require('jimp');
const historyFilePath = path.resolve(__dirname, '../../core/data/taixiu_history.json');
const sessionFilePath = path.resolve(__dirname, '../../core/data/taixiu_sessions.json');
const gameStatusFilePath = path.resolve(__dirname, '../../core/data/taixiu_status.json'); // T·ªáp l∆∞u tr·∫°ng th√°i game (on/off)

const tilethang = 2; // T·ª∑ l·ªá th·∫Øng
const betTime = 60;  // Th·ªùi gian ƒë·∫∑t c∆∞·ª£c (60s)

// H√†m thay th·∫ø d·∫•u ph·∫©y cho s·ªë ti·ªÅn
function replace(int) {
    return int.toString().replace(/(.)(?=(\d{3})+$)/g, '$1,');
}

// H√†m l·∫•y ·∫£nh x√∫c x·∫Øc
function getImage(number) {
    const images = [
        "https://i.imgur.com/cmdORaJ.jpg", "https://i.imgur.com/WNFbw4O.jpg",
        "https://i.imgur.com/Xo6xIX2.jpg", "https://i.imgur.com/NJJjlRK.jpg",
        "https://i.imgur.com/QLixtBe.jpg", "https://i.imgur.com/y8gyJYG.jpg"
    ];
    return images[number - 1];
}

// L∆∞u tr·∫°ng th√°i tr√≤ ch∆°i (on/off)
function saveGameStatus(status) {
    fs.writeFileSync(gameStatusFilePath, JSON.stringify({ status }, null, 2));
}

// L·∫•y tr·∫°ng th√°i tr√≤ ch∆°i (on/off)
function getGameStatus() {
    if (fs.existsSync(gameStatusFilePath)) {
        const gameStatus = JSON.parse(fs.readFileSync(gameStatusFilePath, 'utf8'));
        return gameStatus.status;
    }
    return "on"; // M·∫∑c ƒë·ªãnh l√† "on" n·∫øu kh√¥ng c√≥ tr·∫°ng th√°i l∆∞u tr·ªØ
}

// L∆∞u l·ªãch s·ª≠ c∆∞·ª£c
function saveHistory(userId, data) {
    let history = fs.existsSync(historyFilePath) ? JSON.parse(fs.readFileSync(historyFilePath, 'utf8')) : {};
    if (!history[userId]) history[userId] = [];
    if (history[userId].length >= 8) history[userId].shift();
    history[userId].push(data);
    fs.writeFileSync(historyFilePath, JSON.stringify(history, null, 2));
}

// L∆∞u d·ªØ li·ªáu phi√™n c∆∞·ª£c
function saveSessionData(sessionId, data) {
    let sessions = fs.existsSync(sessionFilePath) ? JSON.parse(fs.readFileSync(sessionFilePath, 'utf8')) : {};
    sessions[sessionId] = data;
    fs.writeFileSync(sessionFilePath, JSON.stringify(sessions, null, 2));
}

// H√†m kh·ªüi t·∫°o khi t·∫£i module
this.onLoad = async function () {
    if (!fs.existsSync(historyFilePath)) fs.writeFileSync(historyFilePath, JSON.stringify({}, null, 2));
    if (!fs.existsSync(sessionFilePath)) fs.writeFileSync(sessionFilePath, JSON.stringify({}, null, 2));
    if (!fs.existsSync(gameStatusFilePath)) saveGameStatus("on"); // M·∫∑c ƒë·ªãnh b·∫≠t tr√≤ ch∆°i
};

module.exports = {
    name: "taixiu",
    alias: ["taixiu"],
    version: "1.0.0",
    role: 0,
    author: "DuongKhang",
    info: "T√†i x·ªâu ƒëa d·∫°ng nhi·ªÅu ki·ªÉu",
    category: "Game",
    guides: "[t√†i/x·ªâu] [s·ªë ti·ªÅn/s·ªë %]",
    cd: 5,
    prefix: true,

    // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    onCall: async function ({ msg, event, api, userData, args, utils }) {
        try {
            const { threadID, messageID, senderID } = event;
            const { addMoney, delMoney } = userData;
            const name = (await userData.get(senderID)).name;
            const money = BigInt(await userData.checkMoney(senderID));

            // Ki·ªÉm tra tr·∫°ng th√°i tr√≤ ch∆°i
            const gameStatus = getGameStatus();
            if (gameStatus === "off") {
                return api.sendMessage("‚ùé Hi·ªán t·∫°i tr√≤ ch∆°i T√†i X·ªâu ƒë√£ b·ªã t·∫Øt. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
            }

            // N·∫øu ng∆∞·ªùi ch∆°i y√™u c·∫ßu h∆∞·ªõng d·∫´n
            if (args[0] === 'h∆∞·ªõng d·∫´n' || args[0] === 'help') {
                return api.sendMessage(
                    `üìö **H∆∞·ªõng d·∫´n ch∆°i T√†i X·ªâu** üìö\n\n
                    - **C√°ch ch∆°i**: L·ª±a ch·ªçn gi·ªØa "T√†i" ho·∫∑c "X·ªâu" v√† c∆∞·ª£c s·ªë ti·ªÅn b·∫°n mu·ªën. 
                    - **L·ª±a ch·ªçn T√†i/X·ªâu**: T√†i n·∫øu t·ªïng s·ªë ƒëi·ªÉm x√∫c x·∫Øc t·ª´ 11 ƒë·∫øn 18, X·ªâu n·∫øu t·ª´ 3 ƒë·∫øn 10.
                    - **C√°ch ƒë·∫∑t c∆∞·ª£c**: 
                        - **T√†i [s·ªë ti·ªÅn]**: ƒê·∫∑t c∆∞·ª£c s·ªë ti·ªÅn b·∫°n mu·ªën v√†o "T√†i"
                        - **X·ªâu [s·ªë ti·ªÅn]**: ƒê·∫∑t c∆∞·ª£c s·ªë ti·ªÅn b·∫°n mu·ªën v√†o "X·ªâu"
                        - **T√†i [s·ªë %]**: ƒê·∫∑t c∆∞·ª£c theo t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa s·ªë d∆∞
                        - **V√≠ d·ª•**: T√†i 5000 ho·∫∑c X·ªâu 10%
                    - **Th·ªùi gian c∆∞·ª£c**: M·ªói l·∫ßn c∆∞·ª£c c√≥ th·ªùi gian c∆∞·ª£c l√† **60 gi√¢y**.
                    - **T·ª∑ l·ªá th·∫Øng**: **2x** (c∆∞·ª£c th·∫Øng s·∫Ω nh·∫≠n g·∫•p ƒë√¥i s·ªë ti·ªÅn c∆∞·ª£c).

                    Ch√∫c b·∫°n may m·∫Øn! üé≤`,
                    event.threadID
                );
            }

            if (!args[1]) return msg.reply("‚ùé Vui l√≤ng cung c·∫•p ti·ªÅn c∆∞·ª£c");

            // X·ª≠ l√Ω s·ªë ti·ªÅn c∆∞·ª£c
            const betMoney = args[1];
            let bet;
            if (/^(allin|all)$/i.test(betMoney)) bet = money;
            else if (/^[0-9]+%$/.test(betMoney)) bet = BigInt(Math.floor((parseInt(betMoney) / 100) * Number(money)));
            else bet = BigInt(betMoney);

            if (bet < 1000n || bet > money) return msg.reply("‚ùé Vui l√≤ng c∆∞·ª£c √≠t nh·∫•t 1000$ v√† kh√¥ng v∆∞·ª£t qu√° s·ªë d∆∞");

            const input = args[0].toLowerCase();
            if (!['t√†i', 'x·ªâu'].includes(input)) return msg.reply("‚ùé Vui l√≤ng ch·ªçn t√†i/x·ªâu");

            // T·∫°o ID phi√™n c∆∞·ª£c
            const sessionId = `session-${Date.now()}`;

            // L∆∞u tr·ªØ phi√™n c∆∞·ª£c
            let gameSession = fs.existsSync(sessionFilePath) ? JSON.parse(fs.readFileSync(sessionFilePath, 'utf8')) : {};
            if (!gameSession[sessionId]) {
                gameSession[sessionId] = {
                    players: {},
                    startTime: Date.now(),
                    betTime: betTime * 1000,  // 60s
                    status: 'active' // Tr·∫°ng th√°i phi√™n c∆∞·ª£c
                };
            }
            gameSession[sessionId].players[senderID] = { bet, choice: input, name };
            saveSessionData(sessionId, gameSession);

            api.sendMessage(`‚è≥ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng. Vui l√≤ng ch·ªù ${betTime} gi√¢y ƒë·ªÉ k·∫øt qu·∫£ ƒë∆∞·ª£c c√¥ng b·ªë!`, threadID, messageID);

            // Ch·ªù k·∫øt qu·∫£ sau 60s
            setTimeout(async () => {
                const number = Array.from({ length: 3 }, () => Math.floor(Math.random() * 6 + 1));
                const total = number.reduce((a, b) => a + b, 0);
                const ans = total >= 11 && total <= 18 ? "t√†i" : "x·ªâu";
                const result = ans === input ? 'win' : 'lose';
                const mn = result === 'win' ? bet * BigInt(tilethang) : bet;
                const resultMessage = `üé≤ K·∫øt qu·∫£: ${number.join(' | ')} - T·ªïng: ${total} (${ans})\nü§ë B·∫°n ${result === 'win' ? 'Th·∫Øng' : 'Thua'} ${replace(mn.toString())}$`;
                
                if (result === 'win') {
                    await addMoney(senderID, mn);
                } else {
                    await delMoney(senderID, mn);
                }

                // L∆∞u l·ªãch s·ª≠ c∆∞·ª£c
                saveHistory(senderID, result === 'win' ? "üü¢" : "‚ö™");

                api.sendMessage({
                    body: `üë§ Ng∆∞·ªùi ch∆°i ${name} ƒë√£ ch·ªçn ${input} v·ªõi s·ªë ti·ªÅn ${replace(bet.toString())}$\n${resultMessage}`,
                    threadID,
                    messageID
                });

                // K·∫øt th√∫c phi√™n c∆∞·ª£c
                gameSession[sessionId].status = 'finished';
                saveSessionData(sessionId, gameSession);

            }, betTime * 1000);

        } catch (error) {
            console.error(error);
            msg.reply("‚ùé ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ch∆°i T√†i X·ªâu.");
        }
    }
};