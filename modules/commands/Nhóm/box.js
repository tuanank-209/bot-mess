module.exports.config = {
	name: "box",
	version: "1.0.0",
	hasPermssion: 0,
	Rent: 1,
	credits: "Niio-team (Vtuan)",
	description: "C√°c c√†i ƒë·∫∑t c·ªßa nh√≥m chat.",
	commandCategory: "Nh√≥m",
	usages: "[name/emoji/admin/image/info]",
	cooldowns: 1,
	dependencies: {
		"request": "",
		"fs-extra": ""
	}
};

module.exports.run = async ({ api, event, args, Threads, Users }) => {
	const fs = require("fs-extra")
	const request = require("request")

	if (args.length == 0) {
		return api.sendMessage(
			`B·∫°n c√≥ th·ªÉ d√πng:\n!box emoji [icon]\n\n!box name [t√™n box c·∫ßn ƒë·ªïi]\n\n!box image [rep m·ªôt ·∫£nh b·∫•t k√¨ c·∫ßn ƒë·∫∑t th√†nh ·∫£nh box]\n\n!box admin [tag] => n√≥ s·∫Ω ƒë∆∞a qtv cho ng∆∞·ªùi ƒë∆∞·ª£c tag\n\n!box info => To√†n b·ªô th√¥ng tin c·ªßa nh√≥m !`,
			event.threadID,
			event.messageID
		);
	}

	const threadInfo = await Threads.getData(event.threadID);
	const v√≠p = threadInfo.threadInfo;

	switch (args[0]) {
		case "name":
			const newName = args.slice(1).join(" ") || event.messageReply.body;
			api.setTitle(newName, event.threadID);
			break;

		case "emoji":
			const emoji = args[1] || event.messageReply.body;
			api.changeThreadEmoji(emoji, event.threadID);
			break;

		case "me":
			if (args[1] == "admin") {
				const isAdmin = v√≠p.adminIDs.some(el => el.id == api.getCurrentUserID());

				if (!isAdmin) {
					api.sendMessage("BOT c·∫ßn n√©m qu·∫£n tr·ªã vi√™n ƒë·ªÉ d√πng ?", event.threadID, event.messageID);
				} else if (!global.config.ADMINBOT.includes(event.senderID)) {
					api.sendMessage("Quy·ªÅn h·∫°n l·ªìn ?", event.threadID, event.messageID);
				} else {
					api.changeAdminStatus(event.threadID, event.senderID, true);
				}
			}
			break;

		case "admin":
			const tagID = event.messageReply ? event.messageReply.senderID : (args.join().indexOf('@') !== -1 ? Object.keys(event.mentions)[0] : args[1]);
			const isUserAdmin = v√≠p.adminIDs.some(el => el.id == tagID);
			const isBotAdmin = v√≠p.adminIDs.some(el => el.id == api.getCurrentUserID());
			const isSenderAdmin = v√≠p.adminIDs.some(el => el.id == event.senderID);

			if (!isSenderAdmin) {
				return api.sendMessage("M√†y ƒë√©o ph·∫£i qu·∫£n tr·ªã vi√™n box ?", event.threadID, event.messageID);
			}
			if (!isBotAdmin) {
				return api.sendMessage("Kh√¥ng n√©m qu·∫£n tr·ªã vi√™n d√πng con c·∫∑c ?", event.threadID, event.messageID);
			}
			if (!isUserAdmin) {
				api.changeAdminStatus(event.threadID, tagID, true);
			} else {
				api.changeAdminStatus(event.threadID, tagID, false);
			}
			break;

		case "image":
			if (event.type !== "message_reply" || !event.messageReply.attachments || event.messageReply.attachments.length !== 1) {
				return api.sendMessage("‚ùå B·∫°n ph·∫£i reply m·ªôt audio, video, ·∫£nh n√†o ƒë√≥", event.threadID, event.messageID);
			}
			const callback = () => api.changeGroupImage(fs.createReadStream(__dirname + "/cache/1.png"), event.threadID, () => fs.unlinkSync(__dirname + "/cache/1.png"));
			request(encodeURI(event.messageReply.attachments[0].url)).pipe(fs.createWriteStream(__dirname + '/cache/1.png')).on('close', callback);
			break;

		case "info":
			const totalMembers = v√≠p.participantIDs.length;
			const admins = await Promise.all(v√≠p.adminIDs.map(admin => Users.getNameUser(admin.id)));
			const adminList = admins.join('\n‚Ä¢ ');

			const numMales = v√≠p.userInfo.filter(user => user.gender === 'MALE').length;
			const numFemales = v√≠p.userInfo.filter(user => user.gender === 'FEMALE').length;
			const numBede = v√≠p.userInfo.filter(user => user.gender !== 'MALE' && user.gender !== 'FEMALE').length;

			const approvalMode = v√≠p.approvalMode ? '‚úÖ B·∫≠t' : '‚ùé T·∫Øt';
			const infoMessage = `
üìã Th√¥ng tin nh√≥m
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
T√™n box: ${v√≠p.threadName}
ID Box: ${v√≠p.threadID}
Ph√™ duy·ªát: ${approvalMode}
Link join: ${v√≠p.inviteLink.enable ? `B·∫≠t\n${v√≠p.inviteLink.link}` : 'T·∫Øt'}
Emoji: ${v√≠p.emoji ? v√≠p.emoji : 'like'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë• Th√¥ng tin th√†nh vi√™n
- T·ªïng s·ªë th√†nh vi√™n: ${totalMembers}
  üë®‚Äçü¶∞ Nam: ${numMales} th√†nh vi√™n
  üë©‚Äçü¶∞ N·ªØ: ${numFemales} th√†nh vi√™n
  üë©‚Äç‚ù§Ô∏è‚Äçüë® B√™ ƒë√™: ${numBede} th√†nh vi√™n
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïµÔ∏è‚Äç‚ôÇÔ∏è Qu·∫£n tr·ªã vi√™n (${v√≠p.adminIDs.length})
${adminList}`;
			if (v√≠p.imageSrc) {
				const callbackInfo = () => api.sendMessage({ body: infoMessage, attachment: fs.createReadStream(__dirname + '/cache/1.png') }, event.threadID, () => fs.unlinkSync(__dirname + '/cache/1.png'), event.messageID);
				request(encodeURI(v√≠p.imageSrc)).pipe(fs.createWriteStream(__dirname + '/cache/1.png')).on('close', callbackInfo);
			} else {
				api.sendMessage(infoMessage, event.threadID, event.messageID);
			}
			break;
	}
};
